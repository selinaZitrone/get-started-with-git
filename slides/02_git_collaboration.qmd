---
title: "Introduction to version control with Git"
subtitle: "Day 2: Branching, Merging and collaboration workflows"
author: "Selina Baldauf"
date: today
date-format: long
format: 
  revealjs:
    footer: "Branching, Merging and Collaboration with Git"
    highlight-style: printing
    mainfont: Cabinet Grotesk
    slide-number: true
    show-slide-number: all
    incremental: true
    self-contained: true
    code-line-numbers: false
    theme: slides.scss
    auto-stretch: false
    scrollable: false
    fig-align: center
editor: source
execute: 
  echo: false
  eval: true
from: markdown+emoji
---

## Before we start

Let's check if we are all set with the [teams](https://docs.google.com/spreadsheets/d/1tNwDnfKM84gI-Xd5myr4gbRRJeRGBvAuAr4YjOy-M-o/edit#gid=0).

## Recap

:::{.columns}

:::{.column width="70%"}

Basic Git workflow:

:::{.nonincremental}

1. **Initialize** a Git repository
2. **Work** on the project
3. **Stage** and **commit** changes to the local repository
4. **Push** to the remote repository

:::

:::

:::{.column width="30%"}

![](img/day2/local_to_remote.png){fig-align="center"}

:::

:::


## Recap

:::{.columns}

:::{.column width="70%"}

Basic Git workflow:

:::{.nonincremental}

1. **Initialize** a Git repository
2. **Work** on the project
3. **Stage** and **commit** changes to the local repository
4. **Push** to the remote repository

:::

:::

:::{.column width="30%"}

![](img/day2/both_directions_with_question.png){fig-align="center"}

:::

:::

## Recap

Git is a **distributed version control system**

:::{.columns}

:::{.column width="50%"}

![](img/day1/distributed.png)

:::

:::{.column width="50%"}

::: {.nonincremental}

- Idea: many *local* repositories synced via one *remote* repo

:::

::: {.nonincremental}
- Collaborate with
  - **yourself** on different machines
  - your **colleagues** and friends
  - **strangers** on open source projects

:::

:::

:::

## Get a repo from a remote

In Git language, this is called **cloning**

:::{.nonincremental}
  - Get a **full copy** of the remote repo
:::

![](img/day2/git_clone_concept_only_remote.png)

## Get a repo from a remote

In Git language, this is called **cloning**

:::{.nonincremental}
  - Get a **full copy** of the remote repo
:::

![](img/day2/git_clone_concept_both.png)

## Get a repo from a remote

You can clone

- all of your own repositories (public and private)
- all repositories you are a collaborator on (public and private)
- all public repositories of other people

. . .

All you need is the URL of the remote repository

::: {.fragment}

![](img/day2/github_get_repo_url.png)

:::

# Now you (5 min) {.task-slide}

> Clone your team mate's cook Book repo<br>
> Details in [Task 2 "Clone"](https://selinazitrone.github.io/get-started-with-git/sessions/02_git_collaboration.html#tasks)

## Get changes from the remote

::: {.nonincremental}

- Local changes, publish to remote: `git push`
- Remote changes, pull to local: `git pull`

:::

. . .

![](img/day2/git_pull_concept.png){width=63% fig-align="center"}

## A simple collaboration workflow

<br>

![](img/day2/collab_simple.png)

::: {.nonincremental}

- One remote repo on GitHub, multiple local repos (Bob and me)

:::

- Idea: Everyone works on the same branch
  - **Pull before** you start **working**
  - **Push after** you finished **working**
  
## A simple collaboration workflow

<br>

![](img/day2/collab_simple.png)

This works well if

- Repo is not updated often
- You don't work on the same files simultaneously
- No need to discuss changes before they are integrated
- You collaborate with yourself

## Let's give it a try

. . .

::: {.nonincremental}

- Make sure you are in the repository of your team mate
- Open a recipe in the cook book of your team mate
  - **Repository -> Show in Explorer**
- Change something in there
- Commit the change and push it

:::

. . .

::: {.nonincremental}

Get the changes of your team mate from the remote.

- Switch to your own cook book repository
- Pull the changes (Same button as the push button)
- Have a look at the commit history to see what changed

:::

## A simple collaboration workflow

<br>

![](img/day2/collab_simple.png)

This workflow starts to be problematic when

- People push often/forget to pull regularly
  - Potential conflicts on main
- You just want to experiment
  - Everything goes directly to main
  


## A branching-merging workflow

<br>

![](img/day2/collab_branching_merging.png)

- One remote repo on GitHub, multiple local repos
- Idea: Everyone works on the their **separate branch**
  - **Merge** branch with the main when work is done
- **Pull before** and **push after** working

## A branching-merging workflow

<br>

![](img/day2/collab_branching_merging.png)

**Advantages** of this approach

- Guarantee that main always works
- Potential conflicts don't have to be solved on main
- You can experiment without messing up the main

## Working on a separate branch

The steps to create and work on a separate branch are easy:

![](img/day2/create_branch_stew.png)

- Create a local branch and switch to it
- Work on the branch like you are used to
  - Make changes, **stage** and **commit**

## Merging changes from a branch

To bring changes to the main branch you need to **merge** them.

![](img/day2/merge_branch_stew_ff.png)

Git merge brings the commits from the branch to main

## Merging changes from a branch

To bring changes to the main branch you need to **merge** them.

![](img/day2/merge_branch_stew_merge_commit.png)

If there was a commit in main, a *merge commit* is introduced.

## Merging changes from a branch

To bring changes to the main branch you need to **merge** them.

![](img/day2/merge_branch_stew_merge_commit.png)

If there was a commit in main, a *merge commit* is introduced.

# Now you (10 min) {.task-slide}
> [Create a branch and merge it in your team mate's cook book](https://selinazitrone.github.io/get-started-with-git/sessions/02_git_collaboration.html#tasks)<br>
> Complete task 2 "Branch and merge"

## A branching-merging workflow with GitHub

![](img/day2/collab_branching_pre_pr.png)

- One remote repo on GitHub, multiple local repos
- Idea: Everyone works on the their separate branch
  - ~~**Merge** branch with the main when work is done~~

## A branching-merging workflow with GitHub

![](img/day2/collab_branching_pr.png)

::: {.nonincremental}

- One remote repo on GitHub, multiple local repos
- Idea: Everyone works on the their separate branch
  - ~~**Merge** branch with the main when work is done~~
  - **Create a pull request** on GitHub to ask for a merge

:::

- **Pull before** and **push after** working

## A branching-merging workflow with GitHub

A pull request is basically asking your collaborators:

> What do you think of my changes? Can we integrate them in main or do we still need to change something?

. . .

GitHub has nice features for pull requests, e.g.:

- **Provide context and explanations** for your changes
- Collaborators can easily **compare versions**
- Collaborators can **discuss and comment** on your changes

. . .

A pull request is merged on GitHub when **everyone agreed on the code**.

# Now you (10 min) {.task-slide}
> [Create a pull request on your team mate's repo](https://selinazitrone.github.io/get-started-with-git/sessions/02_git_collaboration.html#tasks)<br>
> Complete task 3 "Pull requests"

# Some good practice tips {.inverse}

## Git

- Commit often (small changes that can be described in one commit message)
- Write good commit messages (it becomes a habit)
- Push (at least) daily (backup!)
- Use `.gitignore`
- Don't commit secrets ;)

## Publishing

Some essentials that will improve your published repository:

- Add a good README.md file
  - Tell people what your project is about and how to use it
  - Check out the [GitHub documentation](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax) for formatting options
- Add a LICENSE file
  - Tell others how to use your code
- Add a DOI to your repository (e.g. via [Zenodo](https://emilio-berti.GitHub.io/idiv-git-introduction/21-GitHub_zenodo/index.html))

. . . 

If you are interested, browse some nice GitHub repositories for inspiration (e.g.
[Computational notebooks guide](https://github.com/FellowsFreiesWissen/computational_notebooks))

## What now?

- Git can seem complicated at first, but you will get used to it
- Make it a habit to use Git, start with your own projects
- Improve your workflow step by step
- Practice makes perfect

Check out the [resources page](https://selinazitrone.github.io/get-started-with-git/resources.html) and the different How-tos for more info and practice.

# Thanks for your attention

> Questions?
