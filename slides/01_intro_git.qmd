---
title: "Introduction to version control with Git"
subtitle: "Day 1: Concepts and individual Git workflow"
author: "Selina Baldauf"
date: today
date-format: long
format: 
  revealjs:
    footer: "Selina Baldauf // Basic Git workflow"
    highlight-style: printing
    mainfont: Cabinet Grotesk
    slide-number: true
    show-slide-number: all
    incremental: true
    self-contained: true
    code-line-numbers: false
    theme: slides.scss
    auto-stretch: false
    scrollable: false
editor: source
execute: 
  echo: false
  eval: true
from: markdown+emoji
---

## Welcome

::: {.columns}

::: {.column width="80%"}

- üéì Ecology/Theoretical Ecology
- üíª **Scientific programmer** @ [Freie Universit√§t Berlin](https://www.bcp.fu-berlin.de/biologie/arbeitsgruppen/botanik/ag_tietjen/index.html)
- üë©‚Äçüè´ **Teaching** R, Git, good scientific practice, ...
:::
::: {.column width = "20%"}

![](img/selina_cropped.jpg){fig-align="right"}

:::
:::

. . .

### Reach out

:::{.text-small}

{{< fa envelope >}} selina.baldauf@fu-berlin.de &nbsp;&nbsp; {{< fa brands bluesky >}} @selina-b

:::

## Before we start

. . .

I :heart: questions

. . .

Did anyone have problems with the workshop preparation?

:::{.nonincremental}
- Install Git
- Install GitHub Desktop
- Get a GitHub account and connect it with GitHub Desktop
:::

## Workshop overview

üéØ Learn simple Git workflows in **theory and practice** that you can **immediately apply** to your research projects.

- Day 1: Git concepts and individual Git workflow
- Day 2: Collaborative Git workflow

## Organization

Material is all [online](https://selinazitrone.GitHub.io/get-started-with-git/)

:::{.nonincremental}

- View and download slides 
- Tasks for Hands-on
- Step by step guides for different workflows
- Will stay online after the workshop

:::

# Let's get started {.inverse}

## It's never final


![[Jorge Cham (PhD comics)](https://phdcomics.com/comics/archive.php?comicid=1531)](img/day1/never_final.png){fig-align="center" width=38%}


<!-- ## Why version control? {.hidden}

Two examples in which proper version control can be a time/stress saver

. . .

![](img/day1/motivation_time.png){fig-align="center" width=65%}

. . .

![](img/day1/motivation_collab.png){fig-align="center" width=66%} -->

## Requirements for good version control

- [ ] Complete and long-term history of every file in your project
- [ ] Safe (e.g. no accidental loss of versions)
- [ ] Easy to use
- [ ] Document all changes: what, why, who, when
- [ ] Allow for collaboration
- [ ] Online version for backup and sharing
- [ ] Offline version for working on the project


## Requirements for good version control

:::{.nonincremental}
- [x] Complete and long-term history of every file in your project
- [x] Safe (e.g. no accidental loss of versions)
- [x] Easy to use
- [x] Document all changes: what, why, who, when
- [x] Allow for collaboration
- [x] Online version for backup and sharing
- [x] Offline version for working on the project
:::

Git checks all the boxes!

## What is Git?

- **Open source and free** to use version control software
- Quasi **standard** for software development
- A whole universe of **other software and services** built on top of it


## What is Git?

- For projects with **mainly text files** (e.g. code, markdown files, ...)

- Basic idea: Take snapshots (**commits**) of your project over time

. . .

![](img/day1/basic_idea.png)

- A project version controlled with Git is a Git **repository** (**repo**)

## What is Git?

Git is a **distributed version control system**

:::{.columns}

:::{.column width="50%"}

:::{.fragment}

![](img/day1/distributed.png)

:::

:::

:::{.column width="50%"}

- Idea: many *local* repositories synced via one *remote* repo
- Everyone has a complete copy of the repo

:::

:::

## How to use Git?

After you [installed it](https://www.atlassian.com/de/git/tutorials/install-git) there are different ways to interact with the software.

## How to use Git - Terminal

Using Git from the terminal

![](images/2023_06_15_git/git-init.png)

. . . 

:::{.columns}

:::{.column width="50%"}

:heavy_plus_sign: Most control<br>

:heavy_plus_sign: A lot of help/answers online<br>

:::

:::{.column width="50%"}

:::{.fragment}

:heavy_minus_sign: You need to use terminal :scream:<br>

:::

:::

:::

## How to use Git - Integrated GUIs

A Git GUI is integrated in most (all?) IDEs, e.g. R Studio, VS Code

![](img/day1/rstudio_vscode_git.png){fig-align="center" width=80%}

. . .

:::{.columns}

:::{.column width="50%"}

:heavy_plus_sign: Easy and intuitive <br>

:heavy_plus_sign: Stay inside IDE<br>

:::

:::{.column width="50%"}

:::{.fragment}

:heavy_minus_sign: Different for every program <br>

:::

:::

:::

## How to use Git - Standalone GUIs
  
Standalone Git GUI software, e.g. GitHub Desktop, Source Tree, ...

![](img/day1/GitHub_desktop.png){width=50% fig-align="center"}

. . .

:::{.columns}

:::{.column width="50%"}

:heavy_plus_sign: Easy and intuitive <br>

:heavy_plus_sign: Use for all projects <br>

:::

:::{.column width="50%"}

:::{.fragment}

:heavy_minus_sign: Switch programs to use Git <br>

:::

:::

:::

## How to use Git?

- Depends on experience and taste
- You can mix methods because they are all interfaces to the same Git
- We will use the GitHub Desktop GUI
  - Beginner-friendly, intuitive and convenient
  - Nice integration with GitHub

:::{.fragment}

:::{.callout-tip}

Have a look at the [website](https://selinazitrone.GitHub.io/get-started-with-git/) where you find **How-To guides for the other methods** as well.

:::

:::

# The basic Git workflow {.inverse}

> `git init`, `git add`, `git commit`, `git push`

## Example

A cook book project to collect all my favorite recipes.

![](img/day1/basic_idea.png)

. . .

In real life this would be e.g. a data analysis project, your thesis in LaTex, 
a software project, ...

## Step 1: Initialize a Git repository

![](img/day1/0_init_concept_folder.png)

## Step 1: Initialize a Git repository

![](img/day1/1_init_concept_folder.png)

## Step 1: Initialize a Git repository

![](img/day1/1_init_explanation.png)


## Step 2: Add and modify files

Git detects any changes in the working directory

![](img/day1/2_modify_concept_folder.png)

## Step 2: Stage changes

Staging a file means to **list it for the next commit**.

![](img/day1/2_modify_concept_folder.png)

## Step 2: Stage changes

Staging a file means to **list it for the next commit**.

![](img/day1/2_add_concept_folder.png)

## Step 3: Commit changes

Commits are the snapshots of your project state

![](img/day1/2_after_add_concept.png)

## Step 3: Commit changes

Commits are the snapshots of your project state

![](img/day1/3_commit_concept_folder.png)

## Step 3: Commit changes

Changes are part of Git history and staging area is clear again 

![](img/day1/3_afterCommit_concept_folder.png)

## How to write good commit messages?

:::::: {.columns}
::: {.column}
![[xkcd](https://xkcd.com/1296/) on commit messages](https://imgs.xkcd.com/comics/git_commit.png){fig-align="center"}
:::

::: {.column}

:::{.fragment}

:heavy_check_mark:

```md
Add pie recipe

This is my favorite pie in the world. 
The recipe comes from my grandfather and 
he learned it from his neighbor.
```


:x:

```md
added a file.

This is really good.
```

:::

:::

:::

. . .

See [here](https://cbea.ms/git-commit/) for more details and guidelines.

## The commit history

::: {layout="[[-1], [1], [-1]]" layout-valign="bottom"}

![](img/day1/commit_info_blank.png)

:::

# Now you (10 min) {.task-slide}

**Stay in the meeting** for the task.<br>
**Ask** if you are stuck. <br>
**Turn down volume** if you are disturbed. <br>

. . .

> Start your own cook book <br>
> Complete [Task 1 "Local repo"](https://selinazitrone.GitHub.io/get-started-with-git/sessions/01_intro_git.html#tasks) 


## Step 4: Share changes with the remote repo

Use remote repos to **synchronize**, **share** and **collaborate** (can be public or private/for collaborators only)

![](img/day1/4_remote_concept.png){width=60% style="position: relative; bottom: -20px; left: 50%; transform: translateX(-50%);"}

## Step 4: Share changes with the remote repo

Use remote repos to **synchronize**, **share** and **collaborate** (can be public or private/for collaborators only)

![](img/day1/4_push_concept.png){width=60% style="position: relative; bottom: -20px; left: 50%; transform: translateX(-50%);"}

## Publishing your projects

- There are **commercial** and **self-hosted** options for your remote repositories
  - Commercial: GitHub, GitLab, Bitbucket, ...
  - Self-hosted: GitLab (maybe at your institution?)

- Please be aware of your institutional guidelines
  - Servers might be outside EU (e.g. GitHub)
  - Privacy rules might apply depending on type of data

## Advantages of publishing your projects

- Visibility and Credit
- Portfolio of your work
- Others can build on your work
- Get feedback
- Citations
- Reproducibility

# Now you (5 min){.task-slide}

> Publish your cook book on GitHub <br>
> Complete [Task 2 "GitHub"](https://selinazitrone.GitHub.io/get-started-with-git/sessions/01_intro_git.html#tasks)

## Summary of the basic steps

:::{.nonincremental}
- `git init`: Initialize a git repository
  - Adds a `.git` folder to your working directory
- `git add`: Add files to the staging area
  - This marks the files as being part of the next commit
- `git commit`: Take a snapshot of your current project version
  - Includes time stamp, commit message and information on the person who did the commit
- `git push`: Push new commits to the remote repository
  - Sync your local project version with the remote e.g. on GitHub
:::

# Undo things {.inverse}

> `git revert`, `git restore`

## Restore/Discard uncommitted changes

- You can easily discard uncommitted changes in your working directory
  - In the terminal: `git restore <file>`
  - In GUIs: right-click the file and select **Discard changes**

## Revert committed changes

- Use `git revert` to revert specific commits
- This does not delete the commit, it creates a **new commit that undoes a previous commit**
  - It's a safe way to undo committed changes

. . .

![](img/day1/commit_history_after_revert.png){width=90%}

# Now you (5 min) {.task-slide}

> Undo some changes in your cook book
> Complete [Task 3 "Undo changes"](https://selinazitrone.GitHub.io/get-started-with-git/sessions/01_intro_git.html#tasks) 

# Ignore files with `.gitignore` {.inverse}

## Ignore files with `.gitignore`

- Git tracks all files in your working directory
- Often, we have files we do not want tracked
  - Personal notes
  - Compiled code and build directories
  - Log files 
  - Hidden system files
  - Personal IDE config files
  - ...
  
## Ignore files with `.gitignore`

- Create a file with the name `.gitignore` in working directory
- Add all files and directories you want to ignore to the `.gitignore` file

. . .

#### Example

```md
# Ignore single files

my_notes.docx  # ignore the file my_notes.docx
debug.log # ignore the file debug.log


# Ignore files with specific endings

*.html    # ignore all .html files
*.pdf     # ignore all .pdf files

# Ignore directories

build/    # ignore all files in subdirectory build
```

See [here](https://www.atlassian.com/git/tutorials/saving-changes/gitignore) for more ignore patterns that you can use.

# Now you (5 min) {.task-slide}

> Ignore some files in your cook book project
> Complete [Task 4 "Ignore files"](https://selinazitrone.GitHub.io/get-started-with-git/sessions/01_intro_git.html#tasks) 

# Thanks for your attention {.inverse}

> Questions?

## Preparation for tomorrow

- Tomorrow we have teams of 2
- Collaborate on the cook book of your team mate

## Preparation for tomorrow

::: {.nonincremental}
1. Enter your GitHub Account Name and the link to your repo [here](https://docs.google.com/spreadsheets/d/1tNwDnfKM84gI-Xd5myr4gbRRJeRGBvAuAr4YjOy-M-o/edit?usp=sharing)

:::

## Preparation for tomorrow

:::{.nonincremental}
1. Enter your GitHub Account Name and the link to your repo [here](https://docs.google.com/spreadsheets/d/1tNwDnfKM84gI-Xd5myr4gbRRJeRGBvAuAr4YjOy-M-o/edit?usp=sharing)
2. Look for the GitHub Name of your team mate and add them as a collaborator to your repository

:::

![](../how-tos/img/gh_add_collaborator.png){width=68% fig-align="center"}

## Preparation for tomorrow

:::{.nonincremental}
1. Enter your GitHub Account Name and the link to your repo [here](https://docs.google.com/spreadsheets/d/1tNwDnfKM84gI-Xd5myr4gbRRJeRGBvAuAr4YjOy-M-o/edit?usp=sharing)
2. Look for the GitHub Name of your team mate and add them as a collaborator to your repository
3. Accept the invitation of your team mate to their repository 
  - You will get an Email or you can do it on GitHub

:::


# Go back in time {.inverse}

> `git checkout`

## Checkout a previous commit

Take your work space back in time temporarily with `git checkout`

. . .

![](img/day1/commit_history_head.png){width=85%}

. . .

![](img/day1/commit_history_checkout.png){width=85%}

