{
  "articles": [
    {
      "path": "how_to_00_ssh_keys.html",
      "title": "Set up SSH key authentication",
      "author": [],
      "contents": "\r\nIn order to use transfer information between Github or Gitlab and your local machine, you need to authenticate yourself to the remote server. On both, Github and Gitlab, this works by using SSH keys. On Github, you can also authenticate using a personal access token (PAT) instead but we will stick with SSH keys here.\r\nIf you want a good and simple explanation of how SSH works, checkout this video\r\nIf you already set up authentication on your machine, you can skip this guide.\r\nIf you are not sure if you already set it up on your machine, you can try the following:\r\nCan you push to Github/Gitlab from the command line without having to provide credentials (except for SSH key password)?\r\nIf yes, then you already set up authentication.\r\n\r\nTry running ssh -T git@github.com or ssh - T git@gitlab.com in the terminal (Git bash for Windows users). If Github/Gitlab welcomes you with your correct user account, you are all set.\r\nIf you don’t have an SSH key set up, please follow the steps from the Github documentation below. Make sure that on top of the website, your correct operating system is selected to get the correct guide (should happen automatically but you never know). If you are using Gitlab, please follow this.\r\nIf you prefer a video, you can check out this one. It is for Gitlab but works the same for Github.\r\nStep 1: Check for existing SSH keys\r\nSee here\r\nStep 2: Generate an SSH key and add it to SSH-agent\r\nSee here\r\nStep 3: Add your public key to your Github account\r\nSee here\r\nStep 4: Test the connection\r\nTo test if the setup was successful, run ssh -T git@github.com or ssh -T git@gitlab.com.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-08T22:49:48+01:00"
    },
    {
      "path": "how_to_01_basic_git_workflow.html",
      "title": "A simple git workflow step by step",
      "author": [],
      "contents": "\r\nThe following describes a simple git workflow starting with a local repo.\r\nThe italic text refers to Windows users.\r\nStep 0: Minimal git configuration\r\nLet git know who you are in order to sign your commits correctly. Git configuration can be set locally (just for the current repo) or globally (global is default for all repos if no local config is specified). To see if you already have git configured run\r\ngit config --global -l\r\nIf you don’t yet see a user.name or user.email field or get a message, that the .gitconfig file does not exist, run the following to configure:\r\ngit config --global user.name \"<your_user_name>\"\r\ngit config --global user.email \"<your_user_email>\"\r\nUse the user name and email that you also use in your Gitlab/Github here.\r\nStart with an empty working directory\r\nIn general, the working directory can be a project that already contains files or a completely empty folder like in this example. For this example, create an empty folder called first_git_project using your operating system’s file explorer or the terminal if you are familiar with it.\r\nOpen the terminal and navigate into the working directory that you just created.\r\nIf you are working on Windows, open the Git bash terminal that comes with your installation of git. Just search the App with the Windows search tool.\r\nYou can use cd /path/to/navigate/to to navigate into a specific path. If you want to go back one level, use cd ...\r\nOn Windows, you can right click on the folder that contains your working directory and then click on Git Bash Here\r\n\r\nTo see if you are in the correct directory, have a look at the path that is written on top. It should show the directory that you just created. Something like this:\r\n\r\nStep 1: Initialize empty git repository\r\nTo initialize a git repo in the working directory run\r\ngit init\r\nThis creates a hidden folder .git in your working directory. The terminal now indicates that you are using git by indicating the branch that you are currently on. The default branch that is usually created by git is called master or main.\r\n\r\nCheck the current status of your git repository by running\r\ngit status\r\nRight now, there should be nothing to commit.\r\nStep 2: Add a file to the git repository\r\nCreate a file Bob.txt in your working directory and add the following text to it:\r\nHello, this is Bob. How are you?\r\nSave and close the file.\r\nNow have a look at the repository with\r\ngit status\r\nBob.txt is now an untracked file that we can add to the staging area with\r\ngit add Bob.txt\r\nRun\r\ngit status\r\nagain, to see how the status of the file has changed. It is now ready to be committed.\r\nStep 3: Commit Bob.txt to the repository\r\nTo commit the file run\r\ngit commit\r\nWait for your default text editor to open, and add a commit message. Close the text editor and the commit is done.\r\nLook how the status of your repository has changed again with\r\ngit status\r\nTo see how the commit that you just did looks like, run\r\ngit log\r\nStep 4: Create a remote repository and add it as a remote\r\nCreate a new remote repository on Gitlab or Github (whichever you already use or prefer to use).\r\n4A) Github\r\nGo to the Github website, log in and click on the green New button on the left of the start page:\r\n\r\nEnter a repository name (e.g. first_git_project), select if it should be private or public and add a description if you like. Set the check mark for adding a README.md file. This way, the remote already has some content that we can integrate into the local repository.\r\nGithub will now bring you to the newly created repository.\r\nAdd the repository on Github as a remote to your local repository\r\nTo add this newly created repository as a remote to your local repository, you first have to copy the remote’s address.\r\nYou can find and copy the address by clicking on the green Code button on the right. Choose the SSH address.\r\n Now switch back to your local terminal and add this address as a remote with the name origin. (Replace the address below with the address of your personal repository)\r\ngit remote add origin git@github.com:selinaZitrone/git_test_project.git\r\n4B) Gitlab\r\nLog in to Gitlab and click on the little + symbol on top of the start page. Choose New project/repository and then Create blank project.\r\n\r\nEnter a repository name (e.g. first_git_project), select if it should be private or public and add a description if you like. Set the check mark for adding a README file.\r\nClick on Create project and Gitlab will bring you to the repositories main page.\r\nAdd the repository on Github as a remote to your local repository\r\nTo get the address of the remote repository click on the blue button Clone on the right. Copy the address under Clone with SSH\r\nNow switch back to your local terminal and add this address as a remote with the name origin. (Replace the address below with the address of your personal repository)\r\ngit remote add origin git@gitlab.com:selinaZitrone/git_test_project.git\r\nStep 5: Push local changes to the remote\r\nYou can push your changes to the remote by running\r\n(Note: If your default local branch is called main, then replace master with main in the command)\r\ngit push --set-upstream origin master\r\nNow you will get an error message and a warning, that the remote contains commits that you don’t have locally. This makes sense, because you added a readme file when creating the remote repository. In these situation, git prevents you from pushing and you first need to pull all changes from the remote (i.e. the README file that we initialized on Github/Gitlab) before pushing.\r\nJust run\r\ngit pull\r\nNow you should be able to run\r\ngit push\r\nOther things to try\r\nAdd a gitignore file\r\nput a pdf file in your repo\r\nlook at git status\r\nAdd a gitignore file\r\nOn Windows, you cannot create a file without a file name. So the Windows explorer will complain if you try to create a file with only the file ending .gitignore. One way around this is to use the terminal. In Git bash, just run touch .gitignore to create a gitignore file\r\n\r\nignore pdf files\r\nAdd a line with the pattern *.pdf to your gitignore file and save it\r\n\r\nlook at git status again\r\nAdd another commit\r\nChange some text in Bob.txt\r\nstage it with git add\r\nlook at the diff with git diff --staged\r\ncommit the changes\r\ncompare this commit to the previous one with\r\ngit commit HEAD^\r\n\r\npush to origin\r\nLook at the log\r\nUse git log to look at the log of your current repository\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-08T22:49:50+01:00"
    },
    {
      "path": "how_to_02_git-collab.html",
      "title": "Collaboration (branching, merging and pull requests)",
      "author": [],
      "contents": "\r\nBefore you start, clone the practice repository for this exercise:\r\ngit clone git@github.com:selinaZitrone/git_collaboration_training.git\r\nThe repo contains only a README.md file.\r\nPart 1: Understand branching and merging\r\nOpen the terminal (Git bash on Windows) and navigate into the repository that you just cloned.\r\nBefore you start working on the repository, create a new branch with your name and switch to it.\r\nThe two step version of this is:\r\ngit branch <your_name>\r\ngit checkout <your_name>\r\nThe one step version is\r\ngit checkout -b <your_name>\r\nAdding some content\r\nCreate a new file with the name your_name.txt and add some text in that file. Add and commit the file like you learned before.\r\nNow we want to practice some merging. But we don’t want to touch the master for now. So create a second branch (make sure that you checked out your new branch and not master):\r\ngit checkout - b <feature_branch>\r\nNow you should be in the feature branch. It should also contain the file with your name and the text in it. Open this file and add some text. Then stage (add) the file and commit it.\r\nTo see the branching pattern that you just created, you can have a look at\r\ngit log --graph --oneline\r\nMerge feature_branch\r\nNow we want to merge the feature_branch back into your name branch. To do so, first, switch back to your name branch with\r\ngit checkout <your_name>\r\nNow do the merge with\r\ngit merge <feature_branch>\r\nNo have a look at the file with your name: The new lines that you just created on the feature_branch should now also be added in your name branch.\r\nPart 2: Push to Github and pull request\r\nNow you want to share your local changes with your collaborators.\r\nThe first step is to push your name branch to Github.\r\nHave a look at which branches exist on the remote with\r\ngit branch -a\r\nYour local name branch is not part of that list of remote branches yet.\r\nSo if you push for the first time, you need to run\r\ngit push --set-upstream origin <your_name>\r\nSince right now, many people are pushing to the remote, it could be that you have to pull the new changes first before you can push your own.\r\nIf this is the case, just run\r\ngit pull\r\nand then try to push again.\r\nDo a pull request\r\nAfter your local branch is successfully pushed to Github, you can request a merge into the master.\r\nLog in to Github and find the repository.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-08T22:49:52+01:00"
    },
    {
      "path": "how_to_03_git-r.html",
      "title": "How to use git with R and R Studio",
      "author": [],
      "contents": "\r\n\r\n\r\nknitr::opts_chunk$set(eval = FALSE)\r\n\r\n\r\n\r\nInstall usethis package\r\n\r\n\r\ninstall.packages(\"usethis\")\r\n\r\n\r\n\r\nConfigure github token\r\nCheck if you already have a personal access token for Github\r\n\r\n\r\ngh::gh_token()\r\n\r\n\r\n\r\nIf not, you can create one\r\n\r\n\r\nusethis::create_github_token()\r\n\r\n\r\n\r\nThis will first open Github and ask you to sign in. Then you are asked to create a new personal access token.\r\nOn top enter a note that reminds you what this token is for (e.g. Something like “RStudio/R on HP laptop”).\r\nYou can set an expiration date that you like to have. You can also select the scopes for your PAT. For our use case, the default selected scopes are enough. Scroll down and click on Generate token.\r\nCopy the token to the clipboard. Careful: You will not be able to read it again\r\nNow register the token with\r\n\r\n\r\ngitcreds::gitcreds_set()\r\n\r\n\r\n\r\nYou are now prompted to paste your token into the Console.\r\nNow your PAT should be added to the credentials. You can check it with\r\n\r\n\r\ngh::gh_token()\r\n\r\n\r\n\r\nAdd usethis to your Rprofile (optional)\r\nIf you want to load the usethis package every time you start R, you can add it to yuor .Rprofile. This way, you have all the usethis functionality available without having to load the packages first.\r\nCarful:  Loading packages automatically should generally only be done for packages that are not used in your R analyses, packages, … Otherwise, you might forget to explicitly load the package in your script and the script breaks if you use it somewhere else. Adding utility packages to the .Rprofile is however, very convenient.\r\nYou can open your .Rprofile file with\r\n\r\n\r\nusethis::edit_r_profile()\r\n\r\n\r\n\r\nThen you can add the following line, save the file and close it:\r\n\r\n\r\nlibrary(usethis)\r\n\r\n\r\n\r\nThis takes effect after restarting R.\r\nNow\r\ncreate new R project and\r\n\r\n\r\nuse_git()\r\nuse_github()\r\n\r\n# add ons\r\nuse_git_ignore()\r\n\r\n\r\n\r\nafter use_git: git gui\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-08T22:49:54+01:00"
    },
    {
      "path": "index.html",
      "title": "Introduction to version control with git",
      "author": [],
      "contents": "\r\nWorkshop Material\r\nYou can find all the workshop material on this website. On top, you can navigate to the presentation slides and the how tos.\r\n\r\n\r\nWorkshop Prerequisites\r\nTo follow everything we discuss in the workshop you need to prepare a few things:\r\n1. Install git on your machine\r\nIf you have git already installed, you can skip this step and go to prerequisite 2.\r\nWindows\r\nYou can download git from here\r\nDownload and install the correct version for your machine (probably 64 bit). Use recommended or default settings during the installation. Most options can also be changed later if you want to.\r\nWith the git installation for Windows, you also get a program called Git bash. Git bash is a terminal application for Windows that provides a Git command line experience.\r\nOpen the Git bash application (you can find it searching in the Windows search bar) and run the command git --version. If the git installation was successful, you should see the version of git that you are using printed to the console.\r\nLinux (Ubuntu)\r\nYou can install git from the terminal. Run\r\nsudo apt-get update\r\nsudo apt-get install git\r\nCheck the version of git that you have installed with\r\ngit --version\r\nMacOS\r\nSome versions of MacOS come with git pre-installed. To check if you already have git, open the terminal and run\r\ngit --version\r\nIf the terminal tells you which version of git is installed, you can skip the next steps.\r\nIf you need to install git, you can do this with homebrew. Just run\r\nbrew install git\r\nThen check the version and verify the installation with\r\ngit --versions\r\n2. Sign up for Github/Gitlab\r\nI will use Github as a remote repository service in the workshop. However, you can also follow if you have Gitlab or any other remote repo service.\r\nIf you don’t use any of these services yet, I suggest to make a Github account to follow this workshop. However, if your university provides a self-hosted Gitlab, you might also prefer to use that instead.\r\nTip: If you sign up for Github with an institutional email address, you will get a free upgrade to Github Pro. This gives you some additional benefits like private wikis, … You can always add a second email address later or change it if you leave your institution.\r\n3. Set up SSH Authentication\r\nIn order to communicate between your local machine and your Github/Gitlab account, you need to set up authentication via SSH keys. Please follow the instructions  here to do so.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-08T22:49:55+01:00"
    },
    {
      "path": "LICENSE.html",
      "author": [],
      "contents": "\r\nMIT License\r\nCopyright (c) 2021 Selina Baldauf\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n",
      "last_modified": "2021-12-08T22:49:56+01:00"
    },
    {
      "path": "Resources.html",
      "title": "Git resources for learning",
      "author": [],
      "contents": "\r\nGit cheat sheet: Always handy if you don’t remember the basic commands\r\nLearning git\r\nBlogpost: Learn git concepts, not commands: Explains really well the concepts of git, also more advanced ones like rebase or cherry-pick.\r\nBlogpost: How to write good commit messages: Explains why good commit messages are important and gives 7 rules for writing them.\r\nGit book: Explains git concepts from the very beginning.\r\nGit with R\r\nBook Happy git with R: Great book to get started with git and R\r\nTools\r\nDownload Github Desktop\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-08T22:49:58+01:00"
    }
  ],
  "collections": []
}
