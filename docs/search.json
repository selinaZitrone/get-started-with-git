{
  "articles": [
    {
      "path": "git-collab.html",
      "author": [],
      "contents": "\r\nNo content yet\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-06T09:01:44+01:00"
    },
    {
      "path": "git-r-how_to.html",
      "title": "How to use git with R and R Studio",
      "author": [],
      "contents": "\r\n\r\n\r\nknitr::opts_chunk$set(eval = FALSE)\r\n\r\n\r\n\r\nInstall usethis package\r\n\r\n\r\ninstall.packages(\"usethis\")\r\n\r\n\r\n\r\nConfigure github token\r\nCheck if you already have a personal access token for Github\r\n\r\n\r\ngh::gh_token()\r\n\r\n\r\n\r\nIf not, you can create one\r\n\r\n\r\nusethis::create_github_token()\r\n\r\n\r\n\r\nThis will first open Github and ask you to sign in. Then you are asked to create a new personal access token.\r\nOn top enter a note that reminds you what this token is for (e.g. Something like “RStudio/R on HP laptop”).\r\nYou can set an expiration date that you like to have. You can also select the scopes for your PAT. For our use case, the default selected scopes are enough. Scroll down and click on Generate token.\r\nCopy the token to the clipboard. Careful: You will not be able to read it again\r\nNow register the token with\r\n\r\n\r\ngitcreds::gitcreds_set()\r\n\r\n\r\n\r\nYou are now prompted to paste your token into the Console.\r\nNow your PAT should be added to the credentials. You can check it with\r\n\r\n\r\ngh::gh_token()\r\n\r\n\r\n\r\nAdd usethis to your Rprofile (optional)\r\nIf you want to load the usethis package every time you start R, you can add it to yuor .Rprofile. This way, you have all the usethis functionality available without having to load the packages first.\r\nCarful:  Loading packages automatically should generally only be done for packages that are not used in your R analyses, packages, … Otherwise, you might forget to explicitly load the package in your script and the script breaks if you use it somewhere else. Adding utility packages to the .Rprofile is however, very convenient.\r\nYou can open your .Rprofile file with\r\n\r\n\r\nusethis::edit_r_profile()\r\n\r\n\r\n\r\nThen you can add the following line, save the file and close it:\r\n\r\n\r\nlibrary(usethis)\r\n\r\n\r\n\r\nThis takes effect after restarting R.\r\nNow\r\ncreate new R project and\r\n\r\n\r\nuse_git()\r\nuse_github()\r\n\r\n# add ons\r\nuse_git_ignore()\r\n\r\n\r\n\r\nafter use_git: git gui\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-06T09:01:47+01:00"
    },
    {
      "path": "index.html",
      "title": "Introduction to version control with git",
      "author": [],
      "contents": "\r\nWorkshop Material\r\nYou can find all the workshop material on this website. On top, you can navigate to the presentation slides and the how tos.\r\n\r\n\r\nWorkshop Prerequisites\r\nTo follow everything we discuss in the workshop you need to prepare a few things:\r\n1. Install git on your machine\r\nIf you have git already installed, you can skip this step and go to prerequisite 2.\r\nWindows\r\nYou can download git from here\r\nDownload and install the correct version for your machine (probably 64 bit). Use recommended or default settings during the installation. Most options can also be changed later if you want to.\r\nWith the git installation for Windows, you also get a program called Git bash. Git bash is a terminal application for Windows that provides a Git command line experience.\r\nOpen the Git bash application (you can find it searching in the Windows search bar) and run the command git --version. If the git installation was successful, you should see the version of git that you are using printed to the console.\r\nLinux (Ubuntu)\r\nYou can install git from the terminal. Run\r\nsudo apt-get update\r\nsudo apt-get install git\r\nCheck the version of git that you have installed with\r\ngit --version\r\nMacOS\r\nSome versions of MacOS come with git pre-installed. To check if you already have git, open the terminal and run\r\ngit --version\r\nIf the terminal tells you which version of git is installed, you can skip the next steps.\r\nIf you need to install git, you can do this with homebrew. Just run\r\nbrew install git\r\nThen check the version and verify the installation with\r\ngit --versions\r\n2. Sign up for Github/Gitlab\r\nI will use Github as a remote repository service in the workshop. However, you can also follow if you have Gitlab or any other remote repo service.\r\nIf you don’t use any of these services yet, I suggest to make a Github account to follow this workshop. However, if your university provides a self-hosted Gitlab, you might also prefer to use that instead.\r\nTip: If you sign up for Github with an institutional email address, you will get a free upgrade to Github Pro. This gives you some additional benefits like private wikis, … You can always add a second email address later or change it if you leave your institution.\r\n3. Set up SSH Authentication\r\nIn order to communicate between your local machine and your Github/Gitlab account, you need to set up authentication via SSH keys. Please follow the instructions  here to do so.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-06T09:01:49+01:00"
    },
    {
      "path": "LICENSE.html",
      "author": [],
      "contents": "\r\nMIT License\r\nCopyright (c) 2021 Selina Baldauf\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n",
      "last_modified": "2021-12-06T09:01:49+01:00"
    },
    {
      "path": "Resources.html",
      "title": "Git resources for learning",
      "author": [],
      "contents": "\r\nNo content yet\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-06T09:01:50+01:00"
    },
    {
      "path": "ssh_keys_how.html",
      "title": "Set up SSH key authentication",
      "author": [],
      "contents": "\r\nIn order to use transfer information between Github or Gitlab and your local machine, you need to authenticate yourself to the remote server. On both, Github and Gitlab, this works by using SSH keys. On Github, you can also authenticate using a personal access token (PAT) instead but we will stick with SSH keys here.\r\nIf you already set up authentication on your machine, you can skip this guide.\r\nIf you are not sure if you already set it up on your machine, you can try the following:\r\nCan you push to Github/Gitlab from the command line without having to provide credentials (except for SSH key password)?\r\nIf yes, then you already set up authentication.\r\n\r\nTry running ssh -T git@github.com or ssh - T git@gitlab.com in the terminal (Git bash for Windows users). If Github/Gitlab welcomes you with your correct user account, you are all set.\r\nIf you don’t have an SSH key set up, please follow the steps from the Github documentation below. Make sure that on top of the website, your correct operating system is selected to get the correct guide (should happen automatically but you never know). If you are using Gitlab, please follow this.\r\nIf you prefer a video, you can check out this one. It is for Gitlab but works the same for Github.\r\nStep 1: Check for existing SSH keys\r\nSee here\r\nStep 2: Generate an SSH key and add it to SSH-agent\r\nSee here\r\nStep 3: Add your public key to your Github account\r\nSee here\r\nStep 4: Test the connection\r\nTo test if the setup was successful, run ssh -T git@github.com or ssh -T git@gitlab.com.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-12-06T09:01:51+01:00"
    }
  ],
  "collections": []
}
