---
title: "How to collaborate using git with R and R Studio"
execute: 
  eval: false
---

# Preparation

## Install usethis package

```{r}
install.packages("usethis")
```

## SSH vs. HTTPS

You can chose if you want to use SSH or HTTPS as a default protocol to communicate with the remote server.
If you correctly set up SSH key authentication, you can just use SSH protocol and skip the next step.
If you have not set up SSH key authentication yet or if you prefer to use HTTPS 
you need to setup a Personal Access Token (PAT).

## Setup PAT to use HTTPS protocol with Github

Check if you already have a personal access token for Github

```{r}
gh::gh_token()
```

If not, you can create one

```{r}
usethis::create_github_token()
```

This will open Github and ask you to sign in. 

Next, you are asked to create a new personal access token.

On top enter a note that reminds you what this token is for (e.g. Something like "RStudio/R on HP laptop").

Set an expiration date of your choice (the shorter the more secure, but then you have
to update it more often - Github will send you an email about this).

You can also select the scopes for your PAT. For general use case, the default selected scopes are enough.
Scroll down and click on `Generate token`.

Copy the token to the clipboard. 

::: {.callout-warning}

You will not be able to read the token again
after you closed this window. So leave the window open until you successfully
set up your connection.

:::

Now register the token with git using the function:

```{r}
gitcreds::gitcreds_set()
```

You are now prompted to paste your token into the Console.

Now your PAT should be added to the credentials. You can check it with

```{r}
gh::gh_token()
```

## Add usethis and the standard protocol to your Rprofile (optional)

If you want to load the `usethis` package automatically when starting R, 
you can add it to your `.Rprofile`. This way, you have all the `usethis` functionality
available without having to load the package first.

::: {.callout-warning}

Loading packages automatically should only be done for packages that are not 
used in your R scripts. Otherwise, you might forget to explicitly load the package
in your script and the script breaks if you use it somewhere else. 

Adding utility packages to the `.Rprofile` can however be convenient.

Read more about this topic [here](https://devtut.github.io/r/rprofile.html).

:::

You can open your `.Rprofile` file with

```{r}
usethis::edit_r_profile()
```

Then you can add the following line, save the file and close it:

```{r}
# supress messages just means that messages are not printed when loading the package
if (interactive()) {
  suppressMessages(library(usethis))
}
options(
  usethis.protocol = "ssh" # or "https" if you chose PAT + HTTPS
)
```

With this, `usethis` will be loaded every time you open RStudio and you already 
registered the default protocol that you want to use with Git (This is only relevant for the Git things you do with `usethis`).

# A Git Workflow using `usethis`

## Step 1: Create new R project

To create a new R project for this exercise call the function:

```{r}
usethis::create_project(path = "path/to/project/project_name")
```

This will create a folder with `project_name` and set up and empty RStudio project.
The project will then immediately open in a new RStudio instance. 
You can see that by default, the project already has some files inside 
(among them a `.gitignore` file).

## Step 2: Initialize a git repository

With the project opened call the function

```{r}
usethis::use_git()
```

You are now informed which changes will be committed. 
This is just the first commit that will include all the files that are in created 
by default and that are not in the `.gitignore`.
 
Confirm that you want to commit these files by selecting the correct number and press enter.
Then agree to the first commit with the commit message "Initial commit".

RStudio will be restarted and a the git GUI client will be added.

Can you find the `Git` Tab in the top right pane?

## Step 3: Create a remote repository on Github

Create a new repository on Github that will be associated with your local repository.

Call the function

```{r}
usethis::use_github(private = TRUE) # default is private = FALSE
```

This should now open Github in the browser and bring you to a freshly created 
Github project that is not associated with your local repository.

Really convenient :tada:

## Step 4: Make some changes

Create a new R file in your project and add some content to it.

You can just copy the following code for convenience:

```{r}
# Look at the first lines of the iris dataset
head(iris)
# What is the iris dataset -> Call the help
?iris
# How many rows and columns does the data set have?
rownum <- nrow(iris)
colnum <- ncol(iris)
print(paste0("The iris dataset has ", rownum, " rows and ", colnum, " columns."))
# Some summary statistics on the iris data set
summary(iris)

# create a plot
plot(iris$Petal.Length, iris$Petal.Width,
  xlab = "Petal Length",
  ylab = "Petal Width",
  main = "Petal Width vs Petal Length",
  pch = 20,
  col = ifelse(iris$Species == "setosa", "coral1",
    ifelse(iris$Species == "virginica", "cyan4",
      ifelse(iris$Species == "versicolor",
        "darkgoldenrod2", "grey"
      )
    )
  )
)
# add a legend
legend("bottomright", c("setosa", "virginica", "versicolor"),
  col = c("coral1", "cyan4", "darkgoldenrod2"), pch = 20
)
```

Save the file in your project.

## Step 5: Commit and push the new file

In the Git Pane of RStudio, click on the "Commit" button (both buttons bring you to a similar window.):

![](rstudio_commit_button.png)

Stage your file (i.e. `git add`) by checking the check box next to it.
On the bottom you can see the code that you added (therefore green).

![](img/rstudio-commit.png)

Enter a commit message on the right and click commit. 
When the commit is finished, close the little window that opened.

Now push the changes to Github by clicking on the green upward arrow on the top right.

Go to Github and check if everything was pushed as you expected.

# Collaboration using branching and merging

## Step 6: Create a new branch

In this step, you will create a new branch for a new feature that you want to introduce.
This branch will later be use to do a pull request on Github.

In RStudio, you can create a new branch, by clicking on the little violet branch symbol in the Git pane:

![](img/rstudio-new-branch.png)

Enter a name for your new branch (no white space in name!) and leave everything else as it is.
Click on create and RStudio will create and switch the branch for you.
Note that now, the checked out branch is not master/main anymore but you new branch (see image above).

## Step 7: Change files and push new branch to remote

Open the R file that you created in your project. Now change some of the code.

You can delete a part of it and instead add something else, like e.g.

```{r}
v1 <- c(1, "a", 2, 3)
v2 <- c(TRUE, TRUE, 1, FALSE, 0)
v3 <- c(0, "23", 5, 7)
v4 <- c(4L, 6L, 23.5345)
v5 <- c(TRUE, "a", FALSE, "FALSE")
```

It's not important that the code makes sense here.

Now save the file, commit and push it again 
(repeat step 5 and make sure that you are not on master/main but on your new branch).

## Step 8: Create a pull request

See [here](create_pull_request.qmd) for a guide on pull requests.